//Defining Waterfall Dialog and Components using botbuilder-dialogs
const {WaterfallDialog, ComponentDialog,DialogSet,DialogTurnStatus} = require('botbuilder-dialogs');

//Defining different types of prompts that we are using in waterfall dialog
const{ConfirmPrompt, ChoicePrompt, DateTimePrompt, NumberPrompt, TextPrompt}= require('botbuilder-dialogs');

const {CardFactory} = require('botbuilder');

const CancelReservationAdaptiveCard = require('C:/Users/61082897/OneDrive - LTIMindtree/Documents/Interactive/RRBOT/rrbot/resources/adaptiveCards/cancelAdaptive.json')

const CARDS = [
    CancelReservationAdaptiveCard
]

//Dialog Set defining. 
const CHOICE_PROMPT = 'CHOICE_PROMPT';
const CONFIRM_PROMPT = 'CONFIRM_PROMPT';
const DATETIME_PROMPT = 'DATETIME_PROMPT ';
const NUMBER_PROMPT = 'NUMBER_PROMPT ';
const TEXT_PROMPT = 'TEXT_PROMPT';
const WATERFALL_DIALOG = 'WATERFALL_DIALOG';
var endDialog='';

//Here we create a class for make reservation using extension of Components Dialog
class CancelReservationDialog extends ComponentDialog{
    constructor(conversationState,userState){
        super('cancelReservationDialog');//Dialog ID for class 

        
        this.addDialog(new TextPrompt(TEXT_PROMPT));
        this.addDialog(new ChoicePrompt(CHOICE_PROMPT));
        this.addDialog(new NumberPrompt(NUMBER_PROMPT));
        this.addDialog(new ConfirmPrompt(CONFIRM_PROMPT));
        this.addDialog(new DateTimePrompt(DATETIME_PROMPT));

        //Gather information from user.
        this.addDialog(new WaterfallDialog(WATERFALL_DIALOG,[
            this.firstStep.bind(this),
            this.confirmStep.bind(this),//Show Summary of values entered by user and ask confirmation to make reservation
            this.summaryStep.bind(this)
            
        ]));

        // this.firstStep.bind(this),//Ask confirmation if user wants to make reservations?
            this.initialDialogId =  WATERFALL_DIALOG;
    }

    //To trigger this dialog from the main dialog (rrbot.js), main dialog will use a run helper function to access the componentDialog
    async run(turnContext, accessor){
        // console.log("run method invoked");

        const dialogSet = new DialogSet(accessor);
        dialogSet.add(this);
        const dialogContext = await dialogSet.createContext(turnContext);

        const results = await dialogContext.continueDialog();
        if (results.status === DialogTurnStatus.empty){
            console.log("Empty Status");
            await dialogContext.beginDialog(this.id);
        }
    }

    async firstStep(step) {
        endDialog = false;
        console.log("first step called")
        await step.context.sendActivity({
            attachments: [CardFactory.adaptiveCard(CARDS[0])]
        })
        await step.context.sendActivity('Enter the reservation Number for Cancellation: ');
        return await step.prompt(TEXT_PROMPT,'')
    }

    async confirmStep(step){
        step.values.reservationNumber = step.result

        var msg = `Here is your Reservation No that i have noted: ${step.values.reservationNumber}`;

        await step.context.sendActivity(msg);

        return await step.prompt(CONFIRM_PROMPT,"Please confirm your details and want to Cancel the reservation",['Yes','No']);
    }

    async summaryStep(step){
        if(step.result===true){
            //Business Logic to create an reservation for Database
            await step.context.sendActivity("Reservation has cancelled. We miss you")
            endDialog = true;
            return await step.endDialog();
        }
    }


    async isDialogComplete(){
        return endDialog;
    }
    
  
}

module.exports.CancelReservationDialog = CancelReservationDialog;





